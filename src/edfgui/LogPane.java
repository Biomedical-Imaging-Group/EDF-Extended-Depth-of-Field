/*  * EDF - Extended Depth of Field *  * Reference: B. Forster et al., Complex Wavelets for Extended Depth-of-Field:  * A New Method for the Fusion of Multichannel Microscopy Images,  * Microscopy Research and Techniques, 2004. *//* * Copyright 2006-2023 Biomedical Imaging Group at the EPFL. *  * EDF is free software: you can redistribute it and/or modify it under the terms of the GNU  * General Public License as published by the Free Software Foundation, either version 3 of  * the License, or (at your option) any later version. *  * EDF is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without  * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  * See the GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License along with * EDF. If not, see <http://www.gnu.org/licenses/>. *//*  * Java Code Project: EDF - Extended Depth of Focus *  * Author: Daniel Sage * Organization: Biomedical Imaging Group (BIG) * Ecole Polytechnique Federale de Lausanne (EPFL), Lausanne, Switzerland * * Information: http://bigwww.epfl.ch/demo/edf/ * * References:  * B. Forster, D. Van De Ville, J. Berent, D. Sage, M. Unser * Complex Wavelets for Extended Depth-of-Field: A New Method for the Fusion * of Multichannel Microscopy Images, Microscopy Research and Techniques,  * 65(1-2), pp. 33-42, September 2004. * * * B. Forster, D. Van De Ville, J. Berent, D. Sage, M. Unser,  * Extended Depth-of-Focus for Multi-Channel Microscopy Images  * Proceedings of IEEE International Symposium on Biomedical Imaging, 2004. */package edfgui;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextArea;import edf.LogSingleton;public class LogPane extends JPanel implements ActionListener {	private JButton bnClear = new JButton("Clear");	private JTextArea log;	private JScrollPane jScrollPane;	public LogPane() {		super();		setLayout(new BorderLayout(5, 5));		log = LogSingleton.getInstance().getJTextArea();		log.setEditable(false);		log.setBackground(Color.white);		jScrollPane = new JScrollPane(log);		JPanel pnButtons = new JPanel();		pnButtons.add(bnClear);		add("North", new JLabel(""));		add("Center", jScrollPane);		add("South", pnButtons);		bnClear.addActionListener(this);	}	public void setEnabled(boolean enabled) {		super.setEnabled(enabled);		this.bnClear.setVisible(enabled);		this.log.setVisible(enabled);	}	public Insets getInsets() {		return (new Insets(5, 5, 5, 5));	}	/**	 * Implements the actionPerformed for the ActionListener.	 */	public synchronized void actionPerformed(ActionEvent e) {		if (e.getSource() == bnClear) {			this.log.setText("");		}		notify();	}}